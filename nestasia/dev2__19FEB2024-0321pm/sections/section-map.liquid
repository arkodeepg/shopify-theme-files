{%- liquid
  assign full_width = section.settings.full_width
  if section.settings.api_key == blank or section.settings.map_address == blank
  	assign section_onboarding = true
  else
  	assign section_onboarding = false
  endif
  if section.settings.background_img != blank
    capture alt
      if section.settings.background_img.alt != blank
        echo section.settings.background_img.alt
      elsif section.settings.title != blank
        echo section.settings.title
      elsif section.settings.sub_title != blank
        echo section.settings.sub_title
      else
        echo section.settings.background_img | split: '/' | last | replace: '-', ' ' | replace: '_', ' ' | split: '.' | first | capitalize
      endif
    endcapture  
  endif
  assign text_color = false
  if section.settings.section_color != 'rgba(0,0,0,0)' and section.settings.section_color != blank
    assign text_color = true
    assign text_color_section = section.settings.section_color
  endif     
  assign text_color_hover = false
  if section.settings.section_color_hover != 'rgba(0,0,0,0)' and section.settings.section_color_hover != blank
    assign text_color_hover = true
    assign text_color_hover_section = section.settings.section_color_hover
  endif
  assign background_color = false
  if section.settings.background != 'rgba(0,0,0,0)' and section.settings.background != blank
    assign background_color = true
    assign background_color_section = section.settings.background
  endif    
  if section.settings.background_gradient != 'rgba(0,0,0,0)' and section.settings.background_gradient != blank
    assign background_color = true
    assign background_color_section = section.settings.background_gradient
  endif
  capture classes
    echo 'dynamic-section dynamic-section-'
    echo section.id 
    echo ' section-padding-top section-padding-bottom section-margin-bottom '
    if section.settings.padding_border
      echo 'section-border '
    endif
  endcapture
  assign overlay_color = false
  if section.settings.background_img_overlay != 'rgba(0,0,0,0)' and section.settings.background_img_overlay != blank
    assign overlay_color = true
    assign overlay_color_section = section.settings.background_img_overlay
  endif
  if section.settings.background_img_overlay_gradient != 'rgba(0,0,0,0)' and section.settings.background_img_overlay_gradient != blank
    assign overlay_color = true
    assign overlay_color_section = section.settings.background_img_overlay_gradient
  endif
  if section.settings.enable_lazy
    assign lazy = 'lazy'
  else
    assign lazy = 'eager'
  endif
  assign banner = false
  assign altf = ''
  assign alts = ''
  assign lmgf = ''
  assign lngf = ''
  assign lltf = ''
  assign llts = ''
  assign pgf = ''
  assign pltf = ''
  assign plts = ''
  assign pli = ''
  assign ragf = ''
  assign rags = ''
  assign raltf = ''
  assign raltfs = ''
  assign ralts = ''
  assign rhgf = ''
  assign rhgs = ''
  assign rhltf = ''
  assign rhlts = ''
  assign rlgf = ''
  assign rlgs = ''
  assign rlltf = ''
  assign rllts = ''
  assign tlgf = ''
  assign tlltf = ''
  assign tllts = ''
  assign tsgf = ''
  assign tsltf = ''
  assign tslts = ''
  assign tli = ''
  assign wgf = ''
  assign wlt = ''
-%}

{% style %}
  .dynamic-section-{{ section.id }} { 
    --margin_padding_desktop: {{ section.settings.padding_desktop }}vh;
    --margin_padding_mobile: {{ section.settings.padding_mobile }}vh;
    {%- if text_color -%}
    --headline_font_color:{{ text_color_section }};
    --body_font_color:{{ text_color_section }};    
    {%- endif -%}
    {%- if text_color_hover -%}
    --body_font_hover_color:{{ text_color_hover_section }};
    {%- endif -%}
    {%- if background_color -%}
    --background:{{ background_color_section }};
    {%- endif -%}
    {%- if overlay_color -%}
    --overlay_background: {{ overlay_color_section }};
    --overlay_opacity: {{ section.settings.background_img_overlay_opacity | times: 0.01 }};
    {%- endif -%}
    --section-padding-top-mobile: {{ section.settings.padding_top_mobile }}px;
    --section-padding-top-desktop: {{ section.settings.padding_top_desktop }}px;
    --section-padding-bottom-mobile: {{ section.settings.padding_bottom_mobile }}px;
    --section-padding-bottom-desktop: {{ section.settings.padding_bottom_desktop }}px;
    --section-margin-bottom-mobile: {{ section.settings.margin_bottom_mobile }}px;
    --section-margin-bottom-desktop: {{ section.settings.margin_bottom_desktop }}px;
  }
{% endstyle %}

<section data-section-id="{{ section.id }}"
         {% unless section_onboarding %}data-section-type="map"{% endunless %} 
         data-url="{{ 'script.map.js' | asset_url }}"
         data-key="{{ section.settings.api_key }}"
         class="{{ classes }}{% if settings.animation_enable %}animate-section-div {% endif %}clearfix">

  {%- liquid
    for block in section.blocks
      case block.type
        when 'admin'
          if block.settings.altf != blank
            assign altf = block.settings.altf
          endif
          if block.settings.alts != blank
            assign alts = block.settings.alts
          endif
        when 'landscape'
          if block.settings.lmgf != blank
            assign lmgf = block.settings.lmgf
          endif
          if block.settings.lngf != blank
            assign lngf = block.settings.lngf
          endif
          if block.settings.lltf != blank
            assign lltf = block.settings.lltf
          endif
          if block.settings.llts != blank
            assign llts = block.settings.llts
          endif
        when 'poi'
          if block.settings.pgf != blank
            assign pgf = block.settings.pgf
          endif
          if block.settings.pltf != blank
            assign pltf = block.settings.pltf
          endif
          if block.settings.plts != blank
            assign plts = block.settings.plts
          endif
          if block.settings.pli != blank
            assign pli = block.settings.pli
          endif
        when 'road'
          if block.settings.ragf != blank
            assign ragf = block.settings.ragf
          endif
          if block.settings.rags != blank
            assign rags = block.settings.rags
          endif
          if block.settings.raltf != blank
            assign raltf = block.settings.raltf
          endif
          if block.settings.ralts != blank
            assign ralts = block.settings.ralts
          endif
          if block.settings.rhgf != blank
            assign rhgf = block.settings.rhgf
          endif
          if block.settings.rhgs != blank
            assign rhgs = block.settings.rhgs
          endif
          if block.settings.rhltf != blank
            assign rhltf = block.settings.rhltf 
          endif
          if block.settings.rhlts != blank
            assign rhlts = block.settings.rhlts
          endif
          if block.settings.rlgf != blank
            assign rlgf = block.settings.rlgf
          endif
          if block.settings.rlgs != blank
            assign rlgs = block.settings.rlgs
          endif
          if block.settings.rlltf != blank
            assign rlltf = block.settings.rlltf
          endif
          if block.settings.rllts != blank
            assign rllts = block.settings.rllts
          endif
        when 'transit'
          if block.settings.tlgf != blank
            assign tlgf = block.settings.tlgf
          endif
          if block.settings.tlltf != blank
            assign tlltf = block.settings.tlltf
          endif
          if block.settings.tllts != blank
            assign tllts = block.settings.tllts
          endif 
          if block.settings.tsgf != blank
            assign tsgf = block.settings.tsgf
          endif
          if block.settings.tsltf != blank
            assign tsltf = block.settings.tsltf
          endif
          if block.settings.tslts != blank
            assign tslts = block.settings.tslts
          endif
          if block.settings.tli != blank
            assign tli = block.settings.tli
          endif
        when 'water'
          if block.settings.wgf != blank
            assign wgf = block.settings.wgf
          endif
          if block.settings.wlt != blank
            assign wlt = block.settings.wlt
          endif
      endcase
    endfor
    assign block_width = section.settings.block_width
    case block_width
      when '4'
        assign block_width = 'four'
      when '6'
        assign block_width = 'six'
      when '8'
        assign block_width = 'eight'
      when '9'
        assign block_width = 'nine'
    endcase
  -%}
  <div class="banner-section banner-section-map {% unless full_width %}container inner-container {% endunless %}{% if settings.animation_enable %}animate-section load {% endif %} clearfix">
      <div class="table content-height content-height-options {% if section_onboarding and section.settings.background_img == blank %}placeholder-svg-background {% endif %}relative {% if section.settings.background_img != blank %}lazycontainer {% endif %}clearfix">
      {%- liquid
        if section.settings.background_img != blank
          assign banner = true
          render 'image.load', img_src: section.settings.background_img, size: section.settings.background_img.width, alt: alt, background: true
        endif
      -%}
      {% unless section_onboarding %}
        <div id="map-container-{{ section.id }}" class="map-container no-background content-height content-height-options{% if overlay_color %} background-overlay{% endif %}">
          <div class="loader"></div>
          <div id="map-{{ section.id }}" 
               class="content-height content-height-options map-box" 
               data-address="{{ section.settings.map_address }}"
               data-zoom="{{ section.settings.map_zoom }}"
               data-icons="{% if section.settings.icons %}on{% else %}off{% endif %}"           
               data-altf="{{ altf }}"
               data-alts="{{ alts }}"
               data-lmgf="{{ lmgf }}"
               data-lngf="{{ lngf }}"
               data-lltf="{{ lltf }}"
               data-llts="{{ llts }}"
               data-pgf="{{ pgf }}"
               data-pltf="{{ pltf }}"
               data-plts="{{ plts }}"
               data-pli="{{ pli }}"
               data-ragf="{{ ragf }}"
               data-rags="{{ rags }}"
               data-raltf="{{ raltf }}"
               data-ralts="{{ ralts }}"
               data-rhgf="{{ rhgf }}"
               data-rhgs="{{ rhgs }}"
               data-rhltf="{{ rhltf }}"
               data-rhlts="{{ rhlts }}"
               data-rlgf="{{ rlgf }}"
               data-rlgs="{{ rlgs }}"
               data-rlltf="{{ rlltf }}"
               data-rllts="{{ rllts }}"
               data-tlgf="{{ tlgf }}"
               data-tlltf="{{ tlltf }}"
               data-tllts="{{ tllts }}"
               data-tsgf="{{ tsgf }}"
               data-tsltf="{{ tsltf }}"
               data-tslts="{{ tslts }}"
               data-tli="{{ tli }}"
               data-wgf="{{ wgf }}"
               data-wlt="{{ wlt }}"></div>
        </div>
        {% endunless %}
      </div>
    </div>
    
    {% if section.settings.title != blank or section.settings.sub_title != blank or section.settings.body != blank %}
      <div class="container {% if banner %}inner-container {% else %}half-pad {% endif %}{% if settings.animation_enable %}animate-section animate-section-margin load {% endif %}clearfix">
        <div{% if banner %}{% unless full_width %} class="inner-container-grid"{% endunless %}{% endif %}>
          <div class="map-body {{ block_width }} animate {{ section.settings.text_alignment }} {{ section.settings.horizontal_content_alignment }} background-white clearfix">
            <div class="twelve clearfix">
              {%- liquid
                if section.settings.title_h1
                assign title = 1
                else
                assign title = 2
                endif
              -%}
              {% if section.settings.title != blank%}<h{{ title }} class="section-title-{{ section.settings.title_size }} section-color">{{ section.settings.title | escape }}</h{{ title }}>{% endif %}
              {% if section.settings.sub_title != blank %}<h3 class="section-title-{{ section.settings.title_sub_size }} section-color">{{ section.settings.sub_title | escape }}</h3>{% endif %}
              {% if section.settings.body != blank %}<div>{{ section.settings.body }}</div>{% endif %}
            </div>
          </div>
        </div>
      </div>
    {% endif %}
  
</section>

{% schema %}
  {
    "name": "t:sections.map.name",
    "settings": [
      {
        "type": "header",
        "content": "t:sections.banner.label"
      },
      {
        "type": "text",
        "id": "title",
        "label": "t:sections.heading.label",
		"default": "Map"
      },
      {
        "id": "title_h1",
        "type": "checkbox",
        "label": "t:sections.heading.heading_one",
        "default": false
      },
      {
        "id": "title_size",
        "type": "range",
        "label": "t:sections.heading.heading_size",
        "min": 12,
        "max": 96,
        "step": 6,
        "unit": "px",
        "default": 48
      },
      {
        "type": "text",
        "id": "sub_title",
        "label": "t:sections.subheading.label"
      },
      {
        "id": "title_sub_size",
        "type": "range",
        "label": "t:sections.subheading.subheading_size",
        "min": 12,
        "max": 96,
        "step": 6,
        "unit": "px",
        "default": 24
      },
      {
        "type": "richtext",
        "id": "body",
        "label": "t:sections.map.address_hours",
        "default": "<p><strong>Location</strong> 123 Any St. | Virginia Beach, VA 23456</p><p><strong>Hours</strong> M - F: 8a - 7p | Sa - Su: 10a - 8p</p>"
      },
      {
        "id": "section_color",
        "type": "color",
        "label": "t:sections.text.color"
      },
      {
        "id": "section_color_hover",
        "type": "color",
        "label": "t:sections.text.hover"
      },
      {
        "type": "select",
        "id": "text_alignment",
        "label": "t:sections.alignment.label",
        "default": "text-center",
        "options": [
          {
            "value": "text-left",
            "label": "t:sections.alignment.left"
          },
          {
            "value": "text-center",
            "label": "t:sections.alignment.center"
          },
          {
            "value": "text-right",
            "label": "t:sections.alignment.right"
          }
        ]
      },
      {
        "type": "select",
        "id": "block_width",
        "label": "t:sections.content_width.label",
        "default": "6",
        "options": [
          {
            "value": "4",
            "label": "33%"
          },
          {
            "value": "6",
            "label": "50%"
          },
          {
            "value": "8",
            "label": "66%"
          },
          {
            "value": "9",
            "label": "75%"
          }
        ]
      },
      {
        "type": "select",
        "id": "horizontal_content_alignment",
        "label": "t:sections.horizontal_position.label",
        "default": "center",
        "options": [
          {
            "value": "left",
            "label": "t:sections.alignment.left"
          },
          {
            "value": "center",
            "label": "t:sections.alignment.center"
          },
          {
            "value": "right",
            "label": "t:sections.alignment.right"
          }
        ]
      },
      {
        "type": "header",
        "content": "t:sections.map.name"
      },
      {
        "id": "api_key",
        "type": "text",
        "label": "t:sections.map.api",
        "info": "t:sections.map.register"
      },
      {
        "type": "text",
		"id": "map_address",        
        "label": "t:sections.map.address",
        "info": "t:sections.map.location"
      },
      {
        "type": "checkbox",
        "id": "icons",
        "label": "t:sections.map.icons",
        "default": true
      },
      {
        "type": "range",
        "id": "map_zoom",
        "min": 1,
        "max": 22,
        "step": 1,
        "label": "t:sections.map.zoom",
        "default": 16
      },
      {
        "type": "header",
        "content": "t:sections.background.label"
      },
      {
        "type": "image_picker",
        "id": "background_img",
        "label": "t:sections.image.label",
        "info": "t:sections.image.desktop.info"
      },
	  {
       "type": "checkbox",
       "id": "full_width",
       "label": "t:sections.full_width.label",
       "default": true
      },
      {
        "type": "range",
        "id": "padding_desktop",
        "min": 5,
        "max": 100,
        "step": 5,
        "unit": "%",
        "label": "t:sections.height.desktop.label",
        "default": 25
      },
      {
        "type": "range",
        "id": "padding_mobile",
        "min": 5,
        "max": 100,
        "step": 5,
        "unit": "%",
        "label": "t:sections.height.mobile.label",
        "default": 25
      },
	  {
        "type": "color",
        "id": "background_img_overlay",
        "label": "t:sections.overlay.label"
      },
      {
        "type": "color_background",
        "id": "background_img_overlay_gradient",
        "label": "t:sections.overlay.gradient"
      },
      {
        "type": "range",
        "id": "background_img_overlay_opacity",
        "min": 0,
        "max": 100,
        "step": 5,
        "unit": "%",
        "label": "t:sections.opacity.label",
        "default": 0
      },
      {
        "type": "header",
        "content": "t:sections.section.name.content"
      },
      {
        "id": "enable_lazy",
        "type": "checkbox",
        "label": "t:sections.section.settings.lazy.multiple.label",
        "default": true
      },
      {
        "id": "background",
        "type": "color",
        "label": "t:sections.section.settings.background_color.label"
      },
      {
        "id": "background_gradient",
        "type": "color_background",
        "label": "t:sections.section.settings.background_gradient.label"
      },
      {
        "type": "paragraph",
        "content": "t:sections.section.settings.mobile.content"
      },
      {
        "id": "padding_top_mobile",
        "type": "range",
        "label": "t:sections.section.settings.top_pad.label",
        "min": 0,
        "max": 60,
        "step": 10,
        "unit": "px",
        "default": 20
      },
      {
        "id": "padding_bottom_mobile",
        "type": "range",
        "label": "t:sections.section.settings.bottom_pad.label",
        "min": 0,
        "max": 60,
        "step": 10,
        "unit": "px",
        "default": 20
      },
      {
        "id": "margin_bottom_mobile",
        "type": "range",
        "label": "t:sections.section.settings.bottom_margin.label",
        "min": 0,
        "max": 60,
        "step": 10,
        "unit": "px",
        "default": 20
      },
      {
        "type": "paragraph",
        "content": "t:sections.section.settings.desktop.content"
      },
      {
        "id": "padding_top_desktop",
        "type": "range",
        "label": "t:sections.section.settings.top_pad.label",
        "min": 0,
        "max": 60,
        "step": 10,
        "unit": "px",
        "default": 40
      },
      {
        "id": "padding_bottom_desktop",
        "type": "range",
        "label": "t:sections.section.settings.bottom_pad.label",
        "min": 0,
        "max": 60,
        "step": 10,
        "unit": "px",
        "default": 40
      },
      {
        "id": "margin_bottom_desktop",
        "type": "range",
        "label": "t:sections.section.settings.bottom_margin.label",
        "min": 0,
        "max": 60,
        "step": 10,
        "unit": "px",
        "default": 40
      },
      {
        "id": "padding_border",
        "type": "checkbox",
        "label": "t:sections.section.settings.border.label",
        "default": true
      }
    ],      
    "blocks": [
      {
        "type": "admin",
        "name": "t:sections.map.admin",
		"limit": 1,
        "settings": [
          {
            "type": "color",
            "id": "altf",
            "label": "t:sections.map.text"
          },
          {
            "type": "color",
            "id": "alts",
            "label": "t:sections.map.text_stroke"
          }
        ]
      },
      {
        "type": "landscape",
        "name": "t:sections.map.landscape",
		"limit": 1,
        "settings": [
          {
            "type": "color",
            "id": "lmgf",
            "label": "t:sections.map.man_made"
          },
          {
            "type": "color",
            "id": "lngf",
            "label": "t:sections.map.natural"
          },
          {
            "type": "color",
            "id": "lltf",
            "label": "t:sections.map.text"
          },
          {
            "type": "color",
            "id": "llts",
            "label": "t:sections.map.text_stroke"
          }
        ]
      },
      {
        "type": "poi",
        "name": "t:sections.map.poi_colors",
		"limit": 1,
        "settings": [
          {
            "type": "color",
            "id": "pgf",
            "label": "t:sections.map.poi"
          },
          {
            "type": "color",
            "id": "pltf",
            "label": "t:sections.map.text"
          },
          {
            "type": "color",
            "id": "plts",
            "label": "t:sections.map.text_stroke"
          },
          {
            "type": "color",
            "id": "pli",
            "label": "t:sections.icon.label"
          }
        ]
      },
      {
        "type": "road",
        "name": "t:sections.map.road",
		"limit": 1,
        "settings": [
          {
            "type": "color",
            "id": "rlgf",
            "label": "t:sections.map.local"
          },
          {
            "type": "color",
            "id": "rlgs",
            "label": "t:sections.map.local_stroke"
          },
          {
            "type": "color",
            "id": "rlltf",
            "label": "t:sections.map.text"
          },
          {
            "type": "color",
            "id": "rllts",
            "label": "t:sections.map.text_stroke"
          },
          {
            "type": "color",
            "id": "ragf",
            "label": "t:sections.map.arterial"
          },
          {
            "type": "color",
            "id": "rags",
            "label": "t:sections.map.arterial_stroke"
          },
          {
            "type": "color",
            "id": "raltf",
            "label": "t:sections.map.text"
          },
          {
            "type": "color",
            "id": "ralts",
            "label": "t:sections.map.text_stroke"
          },
          {
            "type": "color",
            "id": "rhgf",
            "label": "t:sections.map.highway"
          },
          {
            "type": "color",
            "id": "rhgs",
            "label": "t:sections.map.highway_stroke"
          },
          {
            "type": "color",
            "id": "rhltf",
            "label": "t:sections.map.text"
          },
          {
            "type": "color",
            "id": "rhlts",
            "label": "t:sections.map.text_stroke"
          }
		]
	  },
      {
        "type": "transit",
        "name": "t:sections.map.transit",
        "limit": 1,
        "settings": [
          {
            "type": "color",
            "id": "tlgf",
            "label": "t:sections.map.lines"
          },
          {
            "type": "color",
            "id": "tlltf",
            "label": "t:sections.map.text"
          },
          {
            "type": "color",
            "id": "tllts",
            "label": "t:sections.map.text_stroke"
          },
          {
            "type": "color",
            "id": "tsgf",
            "label": "t:sections.map.stations"
          },
          {
            "type": "color",
            "id": "tsltf",
            "label": "t:sections.map.text"
          },
          {
            "type": "color",
            "id": "tslts",
            "label": "t:sections.map.text_stroke"
          },
          {
            "type": "color",
            "id": "tli",
            "label": "t:sections.icon.label"
          }
        ]
      },
      {
        "type": "water",
        "name": "t:sections.map.water_color",
		"limit": 1,
        "settings": [
          {
            "type": "color",
            "id": "wgf",
            "label": "t:sections.map.water"
          },
          {
            "type": "color",
            "id": "wlt",
            "label": "t:sections.map.text"
          }
        ]
      }
    ],
    "presets": [
      {
        "name": "t:sections.map.name"
      }
    ],
    "disabled_on": {
	  "templates": ["password"],
      "groups": ["custom.overlay"]
    }
  }
{% endschema %}